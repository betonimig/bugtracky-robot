<Module>
<ModulePrefs title="Issue Tracker"
             description="Issue Tracker for wave."
             height="200"
             author="Gadgetfactory"
             author_email="gadgetfactory@google.com">
  <Require feature="wave" />
  <Require feature="dynamic-height" />
  <Require feature="views" />
</ModulePrefs>
<Content type="html">
<![CDATA[
<script 
  src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.1/jquery.min.js"></script> 
<script 
  src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js"></script>
<script type="text/javascript" src="{{server}}/js/usernames.js"></script>
<script type="text/javascript" src="{{server}}/js/settings.js"></script>
<style type="text/css">
#main-content {
  border: 1px solid #5590D2;
  margin-bottom: 5px;
}
input[type=text] {
  width: 200px;
}
.fieldlabel {
  font-weight: bold;
}
.ui-autocomplete {
  background-color: white;
  border: 1px solid black;
  width: 200px;
  max-height: 66px;
  overflow: hidden;
}
</style>
<script>
/**
 * Mode of wave.
 * @type {string}
 */
var waveMode = 'UNKNOWN';

/**
 * Id of bug.
 * @type {string}
 */
var bugId;

/**
 * Fill fileds with user data.
 */
function fillUserData(forced) {
  if (bugId == wave.getState().get('bugId')) {
    return;
  }
  bugId = wave.getState().get('bugId');

  var bugTitle = wave.getState().get('mytitle');
  if (!bugTitle) {
    return;
  }

  var status = wave.getState().get('status');
  var type = wave.getState().get('type');
  var assignee = wave.getState().get('assignee');

  setSelectBoxValue('bug-status', status);
  setSelectBoxValue('bug-type', type);
  var element = _gel('bug-assignee');
  if (element) {
    element.value = parseInt(assignee) == -1 ? '' : assignee;
  }

  var priority = wave.getState().get('priority');
  if (parseInt(priority) == -1) {
    priority = 2;
  }
  var priorityElem = _gel('P' + priority);
  if (priorityElem) {
    priorityElem.checked = true;
  }
  _gel('parent-wave-id').value = wave.getState().get('parentWaveId');
}

/**
* To set the default value for the given select box.
* @param {string} elementId Select box element id.
* @param {string} value Default value of the element.
*/
function setSelectBoxValue(elementId, value) {
  var element = _gel(elementId);
  if (!element) {
    return;
  }
  var options = element.options;
  for (var i = 0; i < options.length; i++) {
    if (options[i].value == value) {
      element.selectedIndex = i;
      break;
    }
  }
}

/**
 * To get the select box value for the given element id.
 * @param {Element} element Select box element.
 * @return {string} Value of the element.
 */
function getSelectBoxValue(element) {
  var selectedOption = element.options[element.selectedIndex];
  return selectedOption ? selectedOption.value : '';
}

/**
 * Gets the priority of bug.
 * @param {Element} radioObj Radio element for priority.
 * @return {string} Selected  priority.
 */
function getPriority(radioObj) {
  var radioLength = radioObj.length;
  if (!radioLength) {
    if (radioObj.checked) {
      return radioObj.value.replace('P', '');
    } else {
      return '';
    }
  }
  for (var i = 0; i < radioLength; i++) {
    if (radioObj[i].checked) {
      return radioObj[i].value.replace('P', '');
    }
  }
  return '';
}

/**
 * Creates bug and save the data.
 */
function createIssue() {
  var obj = {
    'title': wave.getState().get('mytitle')
  };
  var element = _gel('bug-status');
  if (element) {
    obj.status = getSelectBoxValue(element) || 'New';
  } else {
    obj.status = '-1';
  }
  element = _gel('bug-type');
  if (element) {
    obj.type = getSelectBoxValue(element) || 'Bug';
  } else {
    obj.type = '-1';
  }
  element = _gel('bug-assignee');
  if (element) {
    var assignee = _trim(element.value);
    obj.assignee = assignee;
    if (element.value != assignee) {
      element.value = assignee
    }
  } else {
    obj.assignee = '-1';
  }
  element = _gel('bug-priority-table');
  if (element) {
    element = document.getElementsByName('bug-priority');
    obj.priority = (element && getPriority(element)) || '2';
  } else {
    obj.priority = '-1';
  }
  wave.getState().submitDelta(obj);
}

/**
 * Disables or enables the priority elements.
 * @param {boolean} isDisable Flag indicates whether disable or enable
 *     the priority fields.
 */
function disablePriority(isDisable) {
  var radioObj = document.getElementsByName('bug-priority')
  if (!radioObj) {
    return;
  }
  var radioLength = radioObj.length;
  if (radioLength == undefined) {
    return;
  }
  for (var i = 0; i < radioLength; i++) {
    radioObj[i].disabled = isDisable;
  }
}

/**
 * Callback for mode change of wave.
 * @param {number} mode Mode of wave.
 */
function receiveMode(mode) {
  var modeStr = 'UNKNOWN';
  switch (mode) {
    case wave.Mode.PLAYBACK:
      modeStr = 'PLAYBACK';
      break;
    case wave.Mode.EDIT:
      modeStr = 'EDIT';
      break;
    case wave.Mode.VIEW:
      modeStr = 'VIEW';
      break;
  }

  var disableFields = mode != wave.Mode.EDIT;
  var element = _gel('bug-status');
  if (element) {
    _gel('bug-status').disabled = disableFields;
  }
  element = _gel('bug-type');
  if (element) {
    element.disabled = disableFields;
  }
  element = _gel('bug-assignee');
  if (element) {
    element.disabled = disableFields;
  }
  disablePriority(disableFields);
  if (waveMode == 'EDIT' && modeStr == 'VIEW') {
    createIssue();
  }
  waveMode = modeStr;
}

/**
 * Generates UI.
 */
function generateUI() {
var html = '<table cellspacing="5" cellpadding="5" width="100%">';
  for (var i = 0; i < fields.length; i++) {
    var field = fields[i];
    html += getOptionHtml(field.label, field.values, field.type);
  }
  html += '</table>';
  _gel('main-content').innerHTML = html;

  // If usernames variable exists, use it to autocomplete
  // See usernames.js
  if (usernames) {
   $("input#bug-assignee").autocomplete({
    source: usernames
   });
  }

  // adjustHeight after a timeout, due to loadCss taking time
  gadgets.window.adjustHeight();
  window.setTimeout(function() {
    gadgets.window.adjustHeight()
  }, 1000);
}

/**
 * Returns html string for options
 * @param {string} values Comma separated values.
 */
function getOptionHtml(label, values, type) {
  var html = '';
  var tplHtml = '';
  var tplData = {
    id: 'bug-' + label.toLowerCase(),
    field: label + ':'
  };

  if (type == 'text') {
    tplHtml = _gel('tpl-bug-text').value;
  } else if (type == 'dropdown') {
    tplHtml = document.getElementById('tpl-bug-dropdown').value;
    for (var i = 0, len = values.length; i < len; i++) {
      html += '<option value="' + values[i] + '">' + values[i] + '</option>';
    }
    tplData.options = html;
  } else if (type == 'radio') { // Priority
    tplHtml = _gel('tpl-bug-radio').value;
    var labelsHtml = '', valuesHtml = '';
    for (var i = 0, len = values.length; i < len; i++) {
      labelsHtml += '<td align="center"><label for="P' + i +
          '">P' + i + '</label></td>';
      valuesHtml += '<td align="center"><input type="radio" value="P' + i +
          '" id="P' + i + '" name="bug-priority" disabled/>';
    }
    tplData.labels = labelsHtml;
    tplData.values = valuesHtml;
  }

  return tplHtml.supplant(tplData);
}

/**
 * Pour the data in template string.
 * @param {Object} dataObject The data object to be filled in template
 *     string.
 * @return {string} The new string created from template string and
 *     filled with the given data.
 */
String.prototype.supplant = function(dataObject) {
  // Replaces {key} with the corresponding value in object.
  return this.replace(/{([^{}]+)}/g,
    function(match, firstSubMatch) {
      var replace = dataObject[firstSubMatch];
      return (typeof replace === 'string' ||
              typeof replace === 'number') ?
          replace : match;
    }
  );
};

/**
 * To be called on load.
 */
function init() {
  // Verify the parent container.
  if (!wave || !wave.isInWaveContainer()) {
    return;
  }
  wave.ui.loadCss();
  generateUI();
  wave.setStateCallback(fillUserData);
  wave.setModeCallback(receiveMode);
}

// Entry point.
gadgets.util.registerOnLoadHandler(init);
</script>
<br>
<input type="hidden" id="parent-wave-id" value="" style="display:none"/>
<div id="main-content">
</div>
<br><br><br>
<textarea id="tpl-bug-dropdown" style="display:none">
  <tr id="{id}-row">
    <td width="70" align="right">
      <span class="fieldlabel">{field}</span>
    </td>
    <td width="*">
      <select id="{id}" style="width:130px" disabled>
        {options}
      </select>
    </td>
  </tr>
</textarea>
<textarea id="tpl-bug-text" style="display:none">
  <tr id="{id}-row">
    <td width="70" align="right">
      <span class="fieldlabel">{field}</span>
    </td>
    <td width="*">
      <input id="{id}" style="width:200px" name="owner" disabled/>
    </td>
  </tr>
</textarea>
<textarea id="tpl-bug-radio" style="display:none">
  <tr id="{id}-row">
    <td align="right">
      <span class="fieldlabel">{field}</span>
    </td>
    <td>
      <table width="150" id="bug-priority-table">
        <tbody>
          <tr>
            {labels}
          </tr>
          <tr>
            {values}
          </tr>
        </tbody>
      </table>
    </td>
  </tr>
</textarea>
]]>
</Content>
</Module>
